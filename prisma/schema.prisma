// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
    USER
    ADMIN
}

enum TaskPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    REVIEW
    COMPLETED
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified Boolean   @default(false)
    image         String?
    password      String
    bio           String?
    role          UserRole  @default(USER)
    sessions      Session[]
    
    // Project relationships
    ownedProjects Project[] @relation("ProjectOwner")
    projectMembers ProjectMember[]
    
    // Task relationships
    ownedTasks    Task[]    @relation("TaskOwner")
    assignedTasks TaskAssignment[]
    
    // Activity
    taskComments  TaskComment[]
    taskActivities TaskActivity[]
    
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Project {
    id          String   @id @default(cuid())
    title       String
    description String?
    timeline    String?  // Could be JSON or separate timeline model later
    
    // Ownership
    ownerId     String
    owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    
    // Team members
    members     ProjectMember[]
    
    // Project content
    tasks       Task[]
    milestones  Milestone[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ProjectMember {
    id        String  @id @default(cuid())
    projectId String
    userId    String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    joinedAt  DateTime @default(now())
    
    @@unique([projectId, userId])
}

model Milestone {
    id          String   @id @default(cuid())
    title       String
    description String?
    dueDate     DateTime?
    completed   Boolean  @default(false)
    
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Task {
    id          String      @id @default(cuid())
    title       String
    description String?     // Rich text description
    dueDate     DateTime?
    priority    TaskPriority @default(MEDIUM)
    status      TaskStatus   @default(TODO)
    
    // Ownership - either by user or project
    userId      String?
    user        User?       @relation("TaskOwner", fields: [userId], references: [id], onDelete: Cascade)
    projectId   String?
    project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    // Task hierarchy
    parentTaskId String?
    parentTask   Task?   @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
    subTasks     Task[]  @relation("SubTasks")
    
    // Assignments and relationships
    assignments  TaskAssignment[]
    comments     TaskComment[]
    attachments  TaskAttachment[]
    activities   TaskActivity[]
    tags         TaskTagRelation[]
    categories   TaskCategoryRelation[]
    timeEntries  TaskTimeEntry[]
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model TaskAssignment {
    id     String @id @default(cuid())
    taskId String
    userId String
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    assignedAt DateTime @default(now())
    
    @@unique([taskId, userId])
}

model TaskComment {
    id      String @id @default(cuid())
    content String
    taskId  String
    userId  String
    task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskAttachment {
    id       String @id @default(cuid())
    filename String
    fileUrl  String
    fileSize Int?
    mimeType String?
    taskId   String
    task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    
    uploadedAt DateTime @default(now())
}

model TaskActivity {
    id          String @id @default(cuid())
    action      String // "created", "updated", "assigned", "completed", etc.
    description String?
    taskId      String
    userId      String
    task        Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime @default(now())
}

model TaskTag {
    id    String @id @default(cuid())
    name  String @unique
    color String? // Hex color for UI
    tasks TaskTagRelation[]
}

model TaskCategory {
    id    String @id @default(cuid())
    name  String @unique
    color String? // Hex color for UI
    tasks TaskCategoryRelation[]
}

model TaskTagRelation {
    id     String  @id @default(cuid())
    taskId String
    tagId  String
    task   Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
    tag    TaskTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    
    @@unique([taskId, tagId])
}

model TaskCategoryRelation {
    id         String       @id @default(cuid())
    taskId     String
    categoryId String
    task       Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
    category   TaskCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    
    @@unique([taskId, categoryId])
}

model TaskTimeEntry {
    id          String    @id @default(cuid())
    description String?
    startTime   DateTime
    endTime     DateTime?
    duration    Int?      // Duration in minutes
    taskId      String
    task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}
