name: 🚀 Deploy Task Noir to AWS

on:
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'ap-south-1'

jobs:
  # 🧪 Testing and Linting Job
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🎯 Cache Prisma
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules/.prisma
        key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎨 Run ESLint
      run: npm run lint
      
    - name: 🏗️ TypeScript type check
      run: npx tsc --noEmit
      
    - name: 📋 Prisma validation
      run: npx prisma validate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # 🚀 Deployment Job
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🎯 Cache Prisma
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules/.prisma
        key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎯 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🗄️ Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🔄 Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: 🚀 Deploy to AWS with SST
      id: deploy
      run: |
        echo "🚀 Starting deployment to production..."
        OUTPUT=$(npx sst deploy --stage production)
        echo "$OUTPUT"
        echo "✅ Deployment completed successfully!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        
    - name: 🩺 Health check
      run: |
        echo "🔍 Waiting for deployment to be ready..."
        sleep 30
        
        DEPLOY_URL="${{ secrets.NEXTAUTH_URL }}"
        echo "🌐 Testing health endpoint: ${DEPLOY_URL}/api/health"
        
        for i in {1..5}; do
          RESPONSE=$(curl -s "${DEPLOY_URL}/api/health" || echo "failed")
          
          if echo "$RESPONSE" | grep -q '"status":"ok"'; then
            echo "✅ Health check passed on attempt $i"
            echo "📋 Response: $RESPONSE"
            break
          else
            echo "❌ Health check failed on attempt $i, retrying in 10s..."
            echo "📋 Response: $RESPONSE"
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "💥 Health check failed after 5 attempts"
            exit 1
          fi
        done
        
    - name: 🎉 Deployment success notification
      if: success()
      run: |
        echo "🎊 Task Noir successfully deployed to AWS!"
        echo "🌟 Your app is live and ready for users!"
        
    - name: 💥 Deployment failure notification
      if: failure()
      run: |
        echo "😞 Deployment failed. Check the logs above for details."
        echo "🔧 Common issues to check:"
        echo "   - Environment variables are set correctly"
        echo "   - AWS credentials have proper permissions"
        echo "   - Database is accessible from AWS"
